{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "71121b00",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-13T17:16:33.527830Z",
     "iopub.status.busy": "2024-12-13T17:16:33.526960Z",
     "iopub.status.idle": "2024-12-13T17:27:03.837384Z",
     "shell.execute_reply": "2024-12-13T17:27:03.836498Z"
    },
    "papermill": {
     "duration": 630.317624,
     "end_time": "2024-12-13T17:27:03.839405",
     "exception": false,
     "start_time": "2024-12-13T17:16:33.521781",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Downloading https://www.cs.toronto.edu/~kriz/cifar-10-python.tar.gz to ./data/cifar-10-python.tar.gz\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 170498071/170498071 [00:03<00:00, 48322309.12it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Extracting ./data/cifar-10-python.tar.gz to ./data\n",
      "Files already downloaded and verified\n",
      "Epoch [1/5], Loss: 1.7171\n",
      "Epoch [2/5], Loss: 1.3820\n",
      "Epoch [3/5], Loss: 1.2384\n",
      "Epoch [4/5], Loss: 1.1311\n",
      "Epoch [5/5], Loss: 1.0511\n",
      "Accuracy: 65.49%\n"
     ]
    }
   ],
   "source": [
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.optim as optim\n",
    "from torchvision import datasets, transforms\n",
    "from torch.utils.data import DataLoader\n",
    "\n",
    "# 定义 AlexNet\n",
    "class AlexNet(nn.Module):\n",
    "    def __init__(self, num_classes=1000):\n",
    "        super(AlexNet, self).__init__()\n",
    "        self.features = nn.Sequential(\n",
    "            nn.Conv2d(3, 64, kernel_size=11, stride=4, padding=2),\n",
    "            nn.ReLU(inplace=True),\n",
    "            nn.MaxPool2d(kernel_size=3, stride=2),\n",
    "            nn.Conv2d(64, 192, kernel_size=5, padding=2),\n",
    "            nn.ReLU(inplace=True),\n",
    "            nn.MaxPool2d(kernel_size=3, stride=2),\n",
    "            nn.Conv2d(192, 384, kernel_size=3, padding=1),\n",
    "            nn.ReLU(inplace=True),\n",
    "            nn.Conv2d(384, 256, kernel_size=3, padding=1),\n",
    "            nn.ReLU(inplace=True),\n",
    "            nn.Conv2d(256, 256, kernel_size=3, padding=1),\n",
    "            nn.ReLU(inplace=True),\n",
    "            nn.MaxPool2d(kernel_size=3, stride=2),\n",
    "        )\n",
    "        self.classifier = nn.Sequential(\n",
    "            nn.Dropout(),\n",
    "            nn.Linear(256 * 6 * 6, 4096),\n",
    "            nn.ReLU(inplace=True),\n",
    "            nn.Dropout(),\n",
    "            nn.Linear(4096, 4096),\n",
    "            nn.ReLU(inplace=True),\n",
    "            nn.Linear(4096, num_classes),\n",
    "        )\n",
    "\n",
    "    def forward(self, x):\n",
    "        x = self.features(x)\n",
    "        x = torch.flatten(x, 1)\n",
    "        x = self.classifier(x)\n",
    "        return x\n",
    "\n",
    "# 数据预处理\n",
    "transform = transforms.Compose([\n",
    "    transforms.Resize((227, 227)),\n",
    "    transforms.ToTensor(),\n",
    "    transforms.Normalize(mean=[0.5, 0.5, 0.5], std=[0.5, 0.5, 0.5])\n",
    "])\n",
    "\n",
    "# 使用 CIFAR-10 数据集作为例子\n",
    "train_dataset = datasets.CIFAR10(root='./data', train=True, download=True, transform=transform)\n",
    "test_dataset = datasets.CIFAR10(root='./data', train=False, download=True, transform=transform)\n",
    "\n",
    "train_loader = DataLoader(train_dataset, batch_size=64, shuffle=True)\n",
    "test_loader = DataLoader(test_dataset, batch_size=64, shuffle=False)\n",
    "\n",
    "# 初始化模型\n",
    "device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "model = AlexNet(num_classes=10).to(device)\n",
    "\n",
    "# 损失函数和优化器\n",
    "criterion = nn.CrossEntropyLoss()\n",
    "optimizer = optim.Adam(model.parameters(), lr=0.001)\n",
    "\n",
    "# 训练\n",
    "for epoch in range(5):  # 可调整 epochs\n",
    "    model.train()\n",
    "    running_loss = 0.0\n",
    "    for images, labels in train_loader:\n",
    "        images, labels = images.to(device), labels.to(device)\n",
    "\n",
    "        # 前向传播\n",
    "        outputs = model(images)\n",
    "        loss = criterion(outputs, labels)\n",
    "\n",
    "        # 反向传播和优化\n",
    "        optimizer.zero_grad()\n",
    "        loss.backward()\n",
    "        optimizer.step()\n",
    "\n",
    "        running_loss += loss.item()\n",
    "\n",
    "    print(f\"Epoch [{epoch+1}/5], Loss: {running_loss/len(train_loader):.4f}\")\n",
    "\n",
    "# 测试\n",
    "model.eval()\n",
    "correct = 0\n",
    "total = 0\n",
    "with torch.no_grad():\n",
    "    for images, labels in test_loader:\n",
    "        images, labels = images.to(device), labels.to(device)\n",
    "        outputs = model(images)\n",
    "        _, predicted = outputs.max(1)\n",
    "        total += labels.size(0)\n",
    "        correct += (predicted == labels).sum().item()\n",
    "\n",
    "print(f\"Accuracy: {100 * correct / total:.2f}%\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d42a214f",
   "metadata": {
    "papermill": {
     "duration": 0.005741,
     "end_time": "2024-12-13T17:27:03.850413",
     "exception": false,
     "start_time": "2024-12-13T17:27:03.844672",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "33242f2b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-13T17:27:03.861904Z",
     "iopub.status.busy": "2024-12-13T17:27:03.861443Z",
     "iopub.status.idle": "2024-12-13T19:05:48.673942Z",
     "shell.execute_reply": "2024-12-13T19:05:48.672808Z"
    },
    "papermill": {
     "duration": 5924.820464,
     "end_time": "2024-12-13T19:05:48.675833",
     "exception": false,
     "start_time": "2024-12-13T17:27:03.855369",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Using device: cuda\n",
      "Files already downloaded and verified\n",
      "Files already downloaded and verified\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training:   0%|          | 0/391 [00:00<?, ?it/s]/tmp/ipykernel_23/2627079015.py:131: FutureWarning: `torch.cuda.amp.autocast(args...)` is deprecated. Please use `torch.amp.autocast('cuda', args...)` instead.\n",
      "  with torch.cuda.amp.autocast(enabled=True):\n",
      "Training: 100%|██████████| 391/391 [01:37<00:00,  4.00it/s, loss=1.9172, acc=28.67%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch [1/50]\n",
      "Train Loss: 1.9172, Train Acc: 28.67%\n",
      "Test Loss: 1.5585, Test Acc: 42.27%\n",
      "Time: 110.40s\n",
      "------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 391/391 [01:43<00:00,  3.79it/s, loss=1.6336, acc=39.73%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch [2/50]\n",
      "Train Loss: 1.6336, Train Acc: 39.73%\n",
      "Test Loss: 1.4163, Test Acc: 47.76%\n",
      "Time: 116.41s\n",
      "------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 391/391 [01:43<00:00,  3.79it/s, loss=1.5121, acc=44.75%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch [3/50]\n",
      "Train Loss: 1.5121, Train Acc: 44.75%\n",
      "Test Loss: 1.2909, Test Acc: 52.63%\n",
      "Time: 116.08s\n",
      "------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 391/391 [01:43<00:00,  3.79it/s, loss=1.4106, acc=48.87%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch [4/50]\n",
      "Train Loss: 1.4106, Train Acc: 48.87%\n",
      "Test Loss: 1.1730, Test Acc: 57.31%\n",
      "Time: 116.80s\n",
      "------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 391/391 [01:43<00:00,  3.78it/s, loss=1.3108, acc=52.68%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch [5/50]\n",
      "Train Loss: 1.3108, Train Acc: 52.68%\n",
      "Test Loss: 1.0081, Test Acc: 64.39%\n",
      "Time: 116.19s\n",
      "------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 391/391 [01:43<00:00,  3.77it/s, loss=1.2207, acc=56.07%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch [6/50]\n",
      "Train Loss: 1.2207, Train Acc: 56.07%\n",
      "Test Loss: 0.9736, Test Acc: 65.19%\n",
      "Time: 116.70s\n",
      "------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 391/391 [01:43<00:00,  3.78it/s, loss=1.1599, acc=59.01%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch [7/50]\n",
      "Train Loss: 1.1599, Train Acc: 59.01%\n",
      "Test Loss: 0.9082, Test Acc: 67.95%\n",
      "Time: 116.86s\n",
      "------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 391/391 [01:43<00:00,  3.78it/s, loss=1.1090, acc=61.01%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch [8/50]\n",
      "Train Loss: 1.1090, Train Acc: 61.01%\n",
      "Test Loss: 0.8732, Test Acc: 68.50%\n",
      "Time: 116.63s\n",
      "------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 391/391 [01:43<00:00,  3.79it/s, loss=1.0669, acc=62.56%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch [9/50]\n",
      "Train Loss: 1.0669, Train Acc: 62.56%\n",
      "Test Loss: 0.9112, Test Acc: 67.96%\n",
      "Time: 115.13s\n",
      "------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 391/391 [01:42<00:00,  3.80it/s, loss=1.0473, acc=63.50%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch [10/50]\n",
      "Train Loss: 1.0473, Train Acc: 63.50%\n",
      "Test Loss: 0.7877, Test Acc: 72.74%\n",
      "Time: 115.97s\n",
      "------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 391/391 [01:44<00:00,  3.74it/s, loss=1.0115, acc=64.99%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch [11/50]\n",
      "Train Loss: 1.0115, Train Acc: 64.99%\n",
      "Test Loss: 0.7600, Test Acc: 73.97%\n",
      "Time: 117.56s\n",
      "------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 391/391 [01:43<00:00,  3.77it/s, loss=0.9727, acc=66.13%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch [12/50]\n",
      "Train Loss: 0.9727, Train Acc: 66.13%\n",
      "Test Loss: 0.7573, Test Acc: 73.44%\n",
      "Time: 115.64s\n",
      "------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 391/391 [01:44<00:00,  3.76it/s, loss=0.9470, acc=67.65%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch [13/50]\n",
      "Train Loss: 0.9470, Train Acc: 67.65%\n",
      "Test Loss: 0.7011, Test Acc: 75.97%\n",
      "Time: 116.30s\n",
      "------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 391/391 [01:42<00:00,  3.81it/s, loss=0.9154, acc=68.36%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch [14/50]\n",
      "Train Loss: 0.9154, Train Acc: 68.36%\n",
      "Test Loss: 0.7921, Test Acc: 71.58%\n",
      "Time: 114.53s\n",
      "------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 391/391 [01:43<00:00,  3.79it/s, loss=0.8848, acc=69.46%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch [15/50]\n",
      "Train Loss: 0.8848, Train Acc: 69.46%\n",
      "Test Loss: 0.6229, Test Acc: 78.31%\n",
      "Time: 116.21s\n",
      "------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 391/391 [01:42<00:00,  3.80it/s, loss=0.8481, acc=70.79%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch [16/50]\n",
      "Train Loss: 0.8481, Train Acc: 70.79%\n",
      "Test Loss: 0.6157, Test Acc: 78.82%\n",
      "Time: 115.11s\n",
      "------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 391/391 [01:39<00:00,  3.93it/s, loss=0.8282, acc=71.62%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch [17/50]\n",
      "Train Loss: 0.8282, Train Acc: 71.62%\n",
      "Test Loss: 0.6206, Test Acc: 79.23%\n",
      "Time: 112.11s\n",
      "------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 391/391 [01:39<00:00,  3.94it/s, loss=0.7935, acc=72.65%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch [18/50]\n",
      "Train Loss: 0.7935, Train Acc: 72.65%\n",
      "Test Loss: 0.5786, Test Acc: 80.30%\n",
      "Time: 111.85s\n",
      "------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 391/391 [01:38<00:00,  3.96it/s, loss=0.7739, acc=73.52%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch [19/50]\n",
      "Train Loss: 0.7739, Train Acc: 73.52%\n",
      "Test Loss: 0.5760, Test Acc: 80.02%\n",
      "Time: 110.10s\n",
      "------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 391/391 [01:40<00:00,  3.87it/s, loss=0.7479, acc=74.62%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch [20/50]\n",
      "Train Loss: 0.7479, Train Acc: 74.62%\n",
      "Test Loss: 0.5571, Test Acc: 80.44%\n",
      "Time: 113.28s\n",
      "------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 391/391 [01:41<00:00,  3.84it/s, loss=0.7259, acc=75.05%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch [21/50]\n",
      "Train Loss: 0.7259, Train Acc: 75.05%\n",
      "Test Loss: 0.5394, Test Acc: 81.34%\n",
      "Time: 114.70s\n",
      "------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 391/391 [01:41<00:00,  3.85it/s, loss=0.7057, acc=75.70%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch [22/50]\n",
      "Train Loss: 0.7057, Train Acc: 75.70%\n",
      "Test Loss: 0.5376, Test Acc: 81.74%\n",
      "Time: 114.29s\n",
      "------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 391/391 [01:40<00:00,  3.88it/s, loss=0.6821, acc=76.51%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch [23/50]\n",
      "Train Loss: 0.6821, Train Acc: 76.51%\n",
      "Test Loss: 0.5113, Test Acc: 82.56%\n",
      "Time: 113.22s\n",
      "------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 391/391 [01:41<00:00,  3.84it/s, loss=0.6643, acc=77.15%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch [24/50]\n",
      "Train Loss: 0.6643, Train Acc: 77.15%\n",
      "Test Loss: 0.4920, Test Acc: 83.35%\n",
      "Time: 114.58s\n",
      "------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 391/391 [01:40<00:00,  3.88it/s, loss=0.6445, acc=77.77%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch [25/50]\n",
      "Train Loss: 0.6445, Train Acc: 77.77%\n",
      "Test Loss: 0.4711, Test Acc: 84.07%\n",
      "Time: 113.93s\n",
      "------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 391/391 [01:41<00:00,  3.85it/s, loss=0.6269, acc=78.60%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch [26/50]\n",
      "Train Loss: 0.6269, Train Acc: 78.60%\n",
      "Test Loss: 0.4466, Test Acc: 84.60%\n",
      "Time: 114.05s\n",
      "------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 391/391 [01:47<00:00,  3.63it/s, loss=0.6058, acc=79.46%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch [27/50]\n",
      "Train Loss: 0.6058, Train Acc: 79.46%\n",
      "Test Loss: 0.4653, Test Acc: 84.12%\n",
      "Time: 119.75s\n",
      "------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 391/391 [01:52<00:00,  3.47it/s, loss=0.5824, acc=80.08%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch [28/50]\n",
      "Train Loss: 0.5824, Train Acc: 80.08%\n",
      "Test Loss: 0.4456, Test Acc: 84.87%\n",
      "Time: 126.59s\n",
      "------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 391/391 [01:48<00:00,  3.61it/s, loss=0.5670, acc=80.53%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch [29/50]\n",
      "Train Loss: 0.5670, Train Acc: 80.53%\n",
      "Test Loss: 0.4366, Test Acc: 85.00%\n",
      "Time: 121.77s\n",
      "------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 391/391 [01:45<00:00,  3.70it/s, loss=0.5601, acc=80.74%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch [30/50]\n",
      "Train Loss: 0.5601, Train Acc: 80.74%\n",
      "Test Loss: 0.4235, Test Acc: 85.57%\n",
      "Time: 118.61s\n",
      "------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 391/391 [01:44<00:00,  3.74it/s, loss=0.5383, acc=81.50%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch [31/50]\n",
      "Train Loss: 0.5383, Train Acc: 81.50%\n",
      "Test Loss: 0.4420, Test Acc: 85.04%\n",
      "Time: 115.86s\n",
      "------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 391/391 [01:45<00:00,  3.71it/s, loss=0.5210, acc=82.09%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch [32/50]\n",
      "Train Loss: 0.5210, Train Acc: 82.09%\n",
      "Test Loss: 0.4020, Test Acc: 86.49%\n",
      "Time: 119.15s\n",
      "------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 391/391 [01:45<00:00,  3.71it/s, loss=0.5118, acc=82.33%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch [33/50]\n",
      "Train Loss: 0.5118, Train Acc: 82.33%\n",
      "Test Loss: 0.3943, Test Acc: 86.70%\n",
      "Time: 118.61s\n",
      "------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 391/391 [01:47<00:00,  3.65it/s, loss=0.4982, acc=83.00%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch [34/50]\n",
      "Train Loss: 0.4982, Train Acc: 83.00%\n",
      "Test Loss: 0.3871, Test Acc: 86.69%\n",
      "Time: 118.18s\n",
      "------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 391/391 [01:45<00:00,  3.72it/s, loss=0.4815, acc=83.45%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch [35/50]\n",
      "Train Loss: 0.4815, Train Acc: 83.45%\n",
      "Test Loss: 0.3701, Test Acc: 87.46%\n",
      "Time: 118.59s\n",
      "------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 391/391 [01:45<00:00,  3.72it/s, loss=0.4741, acc=83.88%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch [36/50]\n",
      "Train Loss: 0.4741, Train Acc: 83.88%\n",
      "Test Loss: 0.3664, Test Acc: 87.48%\n",
      "Time: 117.95s\n",
      "------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 391/391 [01:43<00:00,  3.76it/s, loss=0.4627, acc=84.07%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch [37/50]\n",
      "Train Loss: 0.4627, Train Acc: 84.07%\n",
      "Test Loss: 0.3567, Test Acc: 87.44%\n",
      "Time: 115.33s\n",
      "------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 391/391 [01:46<00:00,  3.67it/s, loss=0.4478, acc=84.60%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch [38/50]\n",
      "Train Loss: 0.4478, Train Acc: 84.60%\n",
      "Test Loss: 0.3694, Test Acc: 87.28%\n",
      "Time: 118.20s\n",
      "------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 391/391 [01:52<00:00,  3.46it/s, loss=0.4389, acc=84.95%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch [39/50]\n",
      "Train Loss: 0.4389, Train Acc: 84.95%\n",
      "Test Loss: 0.3440, Test Acc: 88.42%\n",
      "Time: 126.30s\n",
      "------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 391/391 [01:52<00:00,  3.48it/s, loss=0.4297, acc=85.06%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch [40/50]\n",
      "Train Loss: 0.4297, Train Acc: 85.06%\n",
      "Test Loss: 0.3468, Test Acc: 88.06%\n",
      "Time: 124.48s\n",
      "------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 391/391 [01:52<00:00,  3.47it/s, loss=0.4200, acc=85.57%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch [41/50]\n",
      "Train Loss: 0.4200, Train Acc: 85.57%\n",
      "Test Loss: 0.3448, Test Acc: 88.28%\n",
      "Time: 125.21s\n",
      "------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 391/391 [01:52<00:00,  3.47it/s, loss=0.4130, acc=85.56%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch [42/50]\n",
      "Train Loss: 0.4130, Train Acc: 85.56%\n",
      "Test Loss: 0.3454, Test Acc: 88.28%\n",
      "Time: 124.51s\n",
      "------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 391/391 [01:54<00:00,  3.42it/s, loss=0.4083, acc=85.76%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch [43/50]\n",
      "Train Loss: 0.4083, Train Acc: 85.76%\n",
      "Test Loss: 0.3366, Test Acc: 88.52%\n",
      "Time: 127.93s\n",
      "------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 391/391 [01:53<00:00,  3.44it/s, loss=0.3980, acc=86.32%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch [44/50]\n",
      "Train Loss: 0.3980, Train Acc: 86.32%\n",
      "Test Loss: 0.3382, Test Acc: 88.43%\n",
      "Time: 125.97s\n",
      "------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 391/391 [01:53<00:00,  3.45it/s, loss=0.3944, acc=86.32%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch [45/50]\n",
      "Train Loss: 0.3944, Train Acc: 86.32%\n",
      "Test Loss: 0.3361, Test Acc: 88.63%\n",
      "Time: 127.88s\n",
      "------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 391/391 [01:53<00:00,  3.43it/s, loss=0.3991, acc=86.40%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch [46/50]\n",
      "Train Loss: 0.3991, Train Acc: 86.40%\n",
      "Test Loss: 0.3373, Test Acc: 88.53%\n",
      "Time: 125.97s\n",
      "------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 391/391 [01:52<00:00,  3.49it/s, loss=0.3918, acc=86.44%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch [47/50]\n",
      "Train Loss: 0.3918, Train Acc: 86.44%\n",
      "Test Loss: 0.3362, Test Acc: 88.45%\n",
      "Time: 124.83s\n",
      "------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 391/391 [01:52<00:00,  3.46it/s, loss=0.3844, acc=86.53%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch [48/50]\n",
      "Train Loss: 0.3844, Train Acc: 86.53%\n",
      "Test Loss: 0.3346, Test Acc: 88.51%\n",
      "Time: 124.88s\n",
      "------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 391/391 [01:53<00:00,  3.44it/s, loss=0.3904, acc=86.59%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch [49/50]\n",
      "Train Loss: 0.3904, Train Acc: 86.59%\n",
      "Test Loss: 0.3329, Test Acc: 88.56%\n",
      "Time: 125.52s\n",
      "------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 391/391 [01:53<00:00,  3.44it/s, loss=0.3873, acc=86.36%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch [50/50]\n",
      "Train Loss: 0.3873, Train Acc: 86.36%\n",
      "Test Loss: 0.3343, Test Acc: 88.57%\n",
      "Time: 125.66s\n",
      "------------------------------------------------------------\n",
      "Best Test Accuracy: 88.63%\n"
     ]
    }
   ],
   "source": [
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.optim as optim\n",
    "from torchvision import datasets, transforms\n",
    "from torch.utils.data import DataLoader\n",
    "import time\n",
    "from tqdm import tqdm\n",
    "\n",
    "# 配置设备\n",
    "device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "print(f\"Using device: {device}\")\n",
    "\n",
    "# 数据预处理和增强\n",
    "transform_train = transforms.Compose([\n",
    "    transforms.Resize((227, 227)),\n",
    "    transforms.RandomHorizontalFlip(),\n",
    "    transforms.RandomRotation(15),\n",
    "    transforms.RandomAffine(degrees=0, translate=(0.1, 0.1)),\n",
    "    transforms.ColorJitter(brightness=0.2, contrast=0.2, saturation=0.2),\n",
    "    transforms.ToTensor(),\n",
    "    transforms.Normalize(mean=[0.4914, 0.4822, 0.4465], std=[0.2023, 0.1994, 0.2010])  # CIFAR-10标准化参数\n",
    "])\n",
    "\n",
    "transform_test = transforms.Compose([\n",
    "    transforms.Resize((227, 227)),\n",
    "    transforms.ToTensor(),\n",
    "    transforms.Normalize(mean=[0.4914, 0.4822, 0.4465], std=[0.2023, 0.1994, 0.2010])\n",
    "])\n",
    "\n",
    "# 加载数据集\n",
    "train_dataset = datasets.CIFAR10(root='./data', train=True, download=True, transform=transform_train)\n",
    "test_dataset = datasets.CIFAR10(root='./data', train=False, download=True, transform=transform_test)\n",
    "\n",
    "train_loader = DataLoader(train_dataset, batch_size=128, shuffle=True, num_workers=4, pin_memory=True)\n",
    "test_loader = DataLoader(test_dataset, batch_size=256, shuffle=False, num_workers=4, pin_memory=True)\n",
    "\n",
    "class ModernAlexNet(nn.Module):\n",
    "    def __init__(self, num_classes=10, dropout_rate=0.5):\n",
    "        super(ModernAlexNet, self).__init__()\n",
    "        self.features = nn.Sequential(\n",
    "            # 第一个卷积块\n",
    "            nn.Conv2d(3, 64, kernel_size=11, stride=4, padding=2),\n",
    "            nn.BatchNorm2d(64),\n",
    "            nn.ReLU(inplace=True),\n",
    "            nn.MaxPool2d(kernel_size=3, stride=2),\n",
    "            nn.Dropout2d(0.25),\n",
    "            \n",
    "            # 第二个卷积块\n",
    "            nn.Conv2d(64, 192, kernel_size=5, padding=2),\n",
    "            nn.BatchNorm2d(192),\n",
    "            nn.ReLU(inplace=True),\n",
    "            nn.MaxPool2d(kernel_size=3, stride=2),\n",
    "            nn.Dropout2d(0.25),\n",
    "            \n",
    "            # 第三个卷积块\n",
    "            nn.Conv2d(192, 384, kernel_size=3, padding=1),\n",
    "            nn.BatchNorm2d(384),\n",
    "            nn.ReLU(inplace=True),\n",
    "            \n",
    "            # 第四个卷积块\n",
    "            nn.Conv2d(384, 256, kernel_size=3, padding=1),\n",
    "            nn.BatchNorm2d(256),\n",
    "            nn.ReLU(inplace=True),\n",
    "            \n",
    "            # 第五个卷积块\n",
    "            nn.Conv2d(256, 256, kernel_size=3, padding=1),\n",
    "            nn.BatchNorm2d(256),\n",
    "            nn.ReLU(inplace=True),\n",
    "            nn.MaxPool2d(kernel_size=3, stride=2),\n",
    "            nn.Dropout2d(0.25)\n",
    "        )\n",
    "        \n",
    "        self.classifier = nn.Sequential(\n",
    "            nn.Dropout(dropout_rate),\n",
    "            nn.Linear(256 * 6 * 6, 4096),\n",
    "            nn.ReLU(inplace=True),\n",
    "            nn.Dropout(dropout_rate),\n",
    "            nn.Linear(4096, 1024),\n",
    "            nn.ReLU(inplace=True),\n",
    "            nn.Linear(1024, num_classes)\n",
    "        )\n",
    "        \n",
    "        self._initialize_weights()\n",
    "    \n",
    "    def _initialize_weights(self):\n",
    "        for m in self.modules():\n",
    "            if isinstance(m, nn.Conv2d):\n",
    "                nn.init.kaiming_normal_(m.weight, mode='fan_out', nonlinearity='relu')\n",
    "                if m.bias is not None:\n",
    "                    nn.init.constant_(m.bias, 0)\n",
    "            elif isinstance(m, nn.BatchNorm2d):\n",
    "                nn.init.constant_(m.weight, 1)\n",
    "                nn.init.constant_(m.bias, 0)\n",
    "            elif isinstance(m, nn.Linear):\n",
    "                nn.init.normal_(m.weight, 0, 0.01)\n",
    "                nn.init.constant_(m.bias, 0)\n",
    "\n",
    "    def forward(self, x):\n",
    "        x = self.features(x)\n",
    "        x = torch.flatten(x, 1)\n",
    "        x = self.classifier(x)\n",
    "        return x\n",
    "\n",
    "class AverageMeter:\n",
    "    \"\"\"Computes and stores the average and current value\"\"\"\n",
    "    def __init__(self):\n",
    "        self.reset()\n",
    "\n",
    "    def reset(self):\n",
    "        self.val = 0\n",
    "        self.avg = 0\n",
    "        self.sum = 0\n",
    "        self.count = 0\n",
    "\n",
    "    def update(self, val, n=1):\n",
    "        self.val = val\n",
    "        self.sum += val * n\n",
    "        self.count += n\n",
    "        self.avg = self.sum / self.count\n",
    "\n",
    "def train_one_epoch(model, train_loader, criterion, optimizer, device, scheduler=None):\n",
    "    model.train()\n",
    "    losses = AverageMeter()\n",
    "    top1 = AverageMeter()\n",
    "    \n",
    "    pbar = tqdm(train_loader, desc='Training')\n",
    "    for batch_idx, (images, labels) in enumerate(pbar):\n",
    "        images, labels = images.to(device), labels.to(device)\n",
    "        \n",
    "        # 混合精度训练\n",
    "        with torch.cuda.amp.autocast(enabled=True):\n",
    "            outputs = model(images)\n",
    "            loss = criterion(outputs, labels)\n",
    "        \n",
    "        # 计算准确率\n",
    "        _, predicted = outputs.max(1)\n",
    "        correct = predicted.eq(labels).sum().item()\n",
    "        acc = 100. * correct / labels.size(0)\n",
    "        \n",
    "        losses.update(loss.item(), images.size(0))\n",
    "        top1.update(acc, images.size(0))\n",
    "        \n",
    "        # 优化器步骤\n",
    "        optimizer.zero_grad()\n",
    "        loss.backward()\n",
    "        torch.nn.utils.clip_grad_norm_(model.parameters(), max_norm=1.0)\n",
    "        optimizer.step()\n",
    "        \n",
    "        if scheduler is not None:\n",
    "            scheduler.step()\n",
    "        \n",
    "        # 更新进度条\n",
    "        pbar.set_postfix({\n",
    "            'loss': f'{losses.avg:.4f}',\n",
    "            'acc': f'{top1.avg:.2f}%'\n",
    "        })\n",
    "    \n",
    "    return losses.avg, top1.avg\n",
    "\n",
    "def evaluate(model, test_loader, criterion, device):\n",
    "    model.eval()\n",
    "    losses = AverageMeter()\n",
    "    top1 = AverageMeter()\n",
    "    \n",
    "    with torch.no_grad():\n",
    "        for images, labels in test_loader:\n",
    "            images, labels = images.to(device), labels.to(device)\n",
    "            \n",
    "            outputs = model(images)\n",
    "            loss = criterion(outputs, labels)\n",
    "            \n",
    "            _, predicted = outputs.max(1)\n",
    "            correct = predicted.eq(labels).sum().item()\n",
    "            acc = 100. * correct / labels.size(0)\n",
    "            \n",
    "            losses.update(loss.item(), images.size(0))\n",
    "            top1.update(acc, images.size(0))\n",
    "    \n",
    "    return losses.avg, top1.avg\n",
    "\n",
    "def main():\n",
    "    # 初始化模型\n",
    "    model = ModernAlexNet().to(device)\n",
    "    criterion = nn.CrossEntropyLoss()\n",
    "    \n",
    "    # 使用AdamW优化器\n",
    "    optimizer = optim.AdamW(model.parameters(), lr=0.001, weight_decay=0.01)\n",
    "    \n",
    "    # 使用 OneCycleLR 调度器\n",
    "    scheduler = optim.lr_scheduler.OneCycleLR(\n",
    "        optimizer, max_lr=0.001,\n",
    "        epochs=50, steps_per_epoch=len(train_loader)\n",
    "    )\n",
    "    \n",
    "    # 训练配置\n",
    "    n_epochs = 50\n",
    "    best_acc = 0\n",
    "    \n",
    "    # 训练循环\n",
    "    for epoch in range(n_epochs):\n",
    "        start_time = time.time()\n",
    "        \n",
    "        # 训练阶段\n",
    "        train_loss, train_acc = train_one_epoch(\n",
    "            model, train_loader, criterion, optimizer, device, scheduler\n",
    "        )\n",
    "        \n",
    "        # 评估阶段\n",
    "        test_loss, test_acc = evaluate(model, test_loader, criterion, device)\n",
    "        \n",
    "        # 保存最佳模型\n",
    "        if test_acc > best_acc:\n",
    "            best_acc = test_acc\n",
    "            torch.save({\n",
    "                'epoch': epoch,\n",
    "                'model_state_dict': model.state_dict(),\n",
    "                'optimizer_state_dict': optimizer.state_dict(),\n",
    "                'scheduler_state_dict': scheduler.state_dict(),\n",
    "                'best_acc': best_acc,\n",
    "            }, 'best_alexnet_cifar10.pth')\n",
    "        \n",
    "        # 打印训练信息\n",
    "        epoch_time = time.time() - start_time\n",
    "        print(f\"\\nEpoch [{epoch+1}/{n_epochs}]\")\n",
    "        print(f\"Train Loss: {train_loss:.4f}, Train Acc: {train_acc:.2f}%\")\n",
    "        print(f\"Test Loss: {test_loss:.4f}, Test Acc: {test_acc:.2f}%\")\n",
    "        print(f\"Time: {epoch_time:.2f}s\")\n",
    "        print(\"-\" * 60)\n",
    "    \n",
    "    print(f\"Best Test Accuracy: {best_acc:.2f}%\")\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d5ec2b73",
   "metadata": {
    "papermill": {
     "duration": 1.590137,
     "end_time": "2024-12-13T19:05:51.847644",
     "exception": false,
     "start_time": "2024-12-13T19:05:50.257507",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "97d446cf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-13T19:05:55.107124Z",
     "iopub.status.busy": "2024-12-13T19:05:55.106696Z",
     "iopub.status.idle": "2024-12-13T20:18:02.489301Z",
     "shell.execute_reply": "2024-12-13T20:18:02.488136Z"
    },
    "papermill": {
     "duration": 4329.033716,
     "end_time": "2024-12-13T20:18:02.491224",
     "exception": false,
     "start_time": "2024-12-13T19:05:53.457508",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Using device: cuda\n",
      "Files already downloaded and verified\n",
      "Files already downloaded and verified\n",
      "\n",
      "Epoch 1/30\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 782/782 [02:13<00:00,  5.84it/s, loss=2.1432, acc=32.58%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 1.8393, Train Acc: 32.58%\n",
      "Test Loss: 1.4404, Test Acc: 46.78%\n",
      "Time: 147.43s\n",
      "------------------------------------------------------------\n",
      "\n",
      "Epoch 2/30\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 782/782 [02:06<00:00,  6.17it/s, loss=1.4615, acc=44.94%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 1.5272, Train Acc: 44.94%\n",
      "Test Loss: 1.2453, Test Acc: 54.33%\n",
      "Time: 140.31s\n",
      "------------------------------------------------------------\n",
      "\n",
      "Epoch 3/30\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 782/782 [02:06<00:00,  6.17it/s, loss=1.0620, acc=51.71%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 1.3503, Train Acc: 51.71%\n",
      "Test Loss: 1.1067, Test Acc: 60.79%\n",
      "Time: 140.54s\n",
      "------------------------------------------------------------\n",
      "\n",
      "Epoch 4/30\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 782/782 [02:05<00:00,  6.22it/s, loss=1.1442, acc=57.96%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 1.1910, Train Acc: 57.96%\n",
      "Test Loss: 0.9313, Test Acc: 67.15%\n",
      "Time: 139.15s\n",
      "------------------------------------------------------------\n",
      "\n",
      "Epoch 5/30\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 782/782 [02:06<00:00,  6.19it/s, loss=1.0318, acc=61.73%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 1.0856, Train Acc: 61.73%\n",
      "Test Loss: 0.8249, Test Acc: 71.43%\n",
      "Time: 139.79s\n",
      "------------------------------------------------------------\n",
      "\n",
      "Epoch 6/30\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 782/782 [02:06<00:00,  6.17it/s, loss=1.3154, acc=65.10%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.9990, Train Acc: 65.10%\n",
      "Test Loss: 0.7802, Test Acc: 72.56%\n",
      "Time: 140.07s\n",
      "------------------------------------------------------------\n",
      "\n",
      "Epoch 7/30\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 782/782 [02:07<00:00,  6.13it/s, loss=0.9548, acc=67.21%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.9391, Train Acc: 67.21%\n",
      "Test Loss: 0.6995, Test Acc: 76.22%\n",
      "Time: 141.29s\n",
      "------------------------------------------------------------\n",
      "\n",
      "Epoch 8/30\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 782/782 [02:11<00:00,  5.95it/s, loss=0.8413, acc=69.32%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.8783, Train Acc: 69.32%\n",
      "Test Loss: 0.6764, Test Acc: 76.46%\n",
      "Time: 145.19s\n",
      "------------------------------------------------------------\n",
      "\n",
      "Epoch 9/30\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 782/782 [02:12<00:00,  5.91it/s, loss=0.6860, acc=70.87%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.8348, Train Acc: 70.87%\n",
      "Test Loss: 0.6408, Test Acc: 78.06%\n",
      "Time: 146.16s\n",
      "------------------------------------------------------------\n",
      "\n",
      "Epoch 10/30\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 782/782 [02:12<00:00,  5.92it/s, loss=1.1482, acc=72.32%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.7930, Train Acc: 72.32%\n",
      "Test Loss: 0.5933, Test Acc: 80.60%\n",
      "Time: 145.56s\n",
      "------------------------------------------------------------\n",
      "\n",
      "Epoch 11/30\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 782/782 [02:08<00:00,  6.07it/s, loss=0.6305, acc=73.90%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.7484, Train Acc: 73.90%\n",
      "Test Loss: 0.8408, Test Acc: 77.54%\n",
      "Time: 141.33s\n",
      "------------------------------------------------------------\n",
      "\n",
      "Epoch 12/30\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 782/782 [02:08<00:00,  6.08it/s, loss=0.8238, acc=75.16%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.7219, Train Acc: 75.16%\n",
      "Test Loss: 0.5344, Test Acc: 81.91%\n",
      "Time: 142.29s\n",
      "------------------------------------------------------------\n",
      "\n",
      "Epoch 13/30\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 782/782 [02:09<00:00,  6.05it/s, loss=0.3821, acc=75.97%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.6902, Train Acc: 75.97%\n",
      "Test Loss: 0.5628, Test Acc: 82.37%\n",
      "Time: 142.63s\n",
      "------------------------------------------------------------\n",
      "\n",
      "Epoch 14/30\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 782/782 [02:09<00:00,  6.03it/s, loss=0.6333, acc=76.70%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.6664, Train Acc: 76.70%\n",
      "Test Loss: 0.5518, Test Acc: 83.52%\n",
      "Time: 143.55s\n",
      "------------------------------------------------------------\n",
      "\n",
      "Epoch 15/30\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 782/782 [02:09<00:00,  6.04it/s, loss=0.6448, acc=77.92%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.6367, Train Acc: 77.92%\n",
      "Test Loss: 0.5151, Test Acc: 83.71%\n",
      "Time: 142.94s\n",
      "------------------------------------------------------------\n",
      "\n",
      "Epoch 16/30\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 782/782 [02:10<00:00,  5.99it/s, loss=0.3184, acc=78.61%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.6120, Train Acc: 78.61%\n",
      "Test Loss: 0.4773, Test Acc: 84.22%\n",
      "Time: 144.41s\n",
      "------------------------------------------------------------\n",
      "\n",
      "Epoch 17/30\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 782/782 [02:09<00:00,  6.05it/s, loss=0.2618, acc=79.56%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.5908, Train Acc: 79.56%\n",
      "Test Loss: 0.4569, Test Acc: 85.02%\n",
      "Time: 142.77s\n",
      "------------------------------------------------------------\n",
      "\n",
      "Epoch 18/30\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 782/782 [02:09<00:00,  6.04it/s, loss=0.6724, acc=80.15%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.5697, Train Acc: 80.15%\n",
      "Test Loss: 0.4461, Test Acc: 85.18%\n",
      "Time: 143.83s\n",
      "------------------------------------------------------------\n",
      "\n",
      "Epoch 19/30\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 782/782 [02:12<00:00,  5.90it/s, loss=0.8683, acc=80.76%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.5535, Train Acc: 80.76%\n",
      "Test Loss: 0.4269, Test Acc: 85.96%\n",
      "Time: 145.98s\n",
      "------------------------------------------------------------\n",
      "\n",
      "Epoch 20/30\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 782/782 [02:11<00:00,  5.94it/s, loss=0.6293, acc=81.47%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.5333, Train Acc: 81.47%\n",
      "Test Loss: 0.4107, Test Acc: 86.04%\n",
      "Time: 145.73s\n",
      "------------------------------------------------------------\n",
      "\n",
      "Epoch 21/30\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 782/782 [02:11<00:00,  5.92it/s, loss=0.6764, acc=81.97%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.5211, Train Acc: 81.97%\n",
      "Test Loss: 0.3957, Test Acc: 86.57%\n",
      "Time: 145.56s\n",
      "------------------------------------------------------------\n",
      "\n",
      "Epoch 22/30\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 782/782 [02:13<00:00,  5.85it/s, loss=0.3866, acc=82.42%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.5041, Train Acc: 82.42%\n",
      "Test Loss: 0.3968, Test Acc: 86.88%\n",
      "Time: 147.43s\n",
      "------------------------------------------------------------\n",
      "\n",
      "Epoch 23/30\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 782/782 [02:13<00:00,  5.88it/s, loss=0.9490, acc=82.82%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.4927, Train Acc: 82.82%\n",
      "Test Loss: 0.3974, Test Acc: 86.94%\n",
      "Time: 147.12s\n",
      "------------------------------------------------------------\n",
      "\n",
      "Epoch 24/30\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 782/782 [02:13<00:00,  5.86it/s, loss=0.6365, acc=83.22%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.4812, Train Acc: 83.22%\n",
      "Test Loss: 0.3951, Test Acc: 87.12%\n",
      "Time: 147.13s\n",
      "------------------------------------------------------------\n",
      "\n",
      "Epoch 25/30\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 782/782 [02:12<00:00,  5.92it/s, loss=0.6318, acc=83.39%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.4793, Train Acc: 83.39%\n",
      "Test Loss: 0.3867, Test Acc: 87.34%\n",
      "Time: 146.17s\n",
      "------------------------------------------------------------\n",
      "\n",
      "Epoch 26/30\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 782/782 [02:11<00:00,  5.94it/s, loss=0.2813, acc=84.00%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.4613, Train Acc: 84.00%\n",
      "Test Loss: 0.3700, Test Acc: 87.40%\n",
      "Time: 145.31s\n",
      "------------------------------------------------------------\n",
      "\n",
      "Epoch 27/30\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 782/782 [02:13<00:00,  5.88it/s, loss=0.6923, acc=84.11%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.4592, Train Acc: 84.11%\n",
      "Test Loss: 0.3812, Test Acc: 87.43%\n",
      "Time: 146.93s\n",
      "------------------------------------------------------------\n",
      "\n",
      "Epoch 28/30\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 782/782 [02:12<00:00,  5.88it/s, loss=0.2357, acc=84.16%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.4571, Train Acc: 84.16%\n",
      "Test Loss: 0.3650, Test Acc: 87.66%\n",
      "Time: 146.86s\n",
      "------------------------------------------------------------\n",
      "\n",
      "Epoch 29/30\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 782/782 [02:12<00:00,  5.89it/s, loss=0.7366, acc=84.33%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.4515, Train Acc: 84.33%\n",
      "Test Loss: 0.3650, Test Acc: 87.70%\n",
      "Time: 146.32s\n",
      "------------------------------------------------------------\n",
      "\n",
      "Epoch 30/30\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 782/782 [02:12<00:00,  5.91it/s, loss=0.3171, acc=84.22%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.4545, Train Acc: 84.22%\n",
      "Test Loss: 0.3672, Test Acc: 87.61%\n",
      "Time: 144.93s\n",
      "------------------------------------------------------------\n",
      "Best Test Accuracy: 87.70%\n"
     ]
    }
   ],
   "source": [
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.optim as optim\n",
    "from torch.utils.data import DataLoader\n",
    "from torchvision import datasets, transforms\n",
    "import time\n",
    "from tqdm import tqdm\n",
    "import numpy as np\n",
    "\n",
    "# 设置随机种子\n",
    "def set_seed(seed=42):\n",
    "    torch.manual_seed(seed)\n",
    "    if torch.cuda.is_available():\n",
    "        torch.cuda.manual_seed_all(seed)\n",
    "    np.random.seed(seed)\n",
    "    torch.backends.cudnn.deterministic = True\n",
    "\n",
    "# 配置设备\n",
    "device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "print(f\"Using device: {device}\")\n",
    "\n",
    "# 数据预处理和数据增强\n",
    "transform_train = transforms.Compose([\n",
    "    transforms.Resize(256),  # 先调整为较大尺寸\n",
    "    transforms.RandomCrop(227),  # 随机裁剪到目标尺寸\n",
    "    transforms.RandomHorizontalFlip(),\n",
    "    transforms.RandomRotation(15),\n",
    "    transforms.ColorJitter(brightness=0.2, contrast=0.2, saturation=0.2),\n",
    "    transforms.ToTensor(),\n",
    "    transforms.Normalize(mean=[0.4914, 0.4822, 0.4465], std=[0.2023, 0.1994, 0.2010])\n",
    "])\n",
    "\n",
    "transform_test = transforms.Compose([\n",
    "    transforms.Resize(256),\n",
    "    transforms.CenterCrop(227),\n",
    "    transforms.ToTensor(),\n",
    "    transforms.Normalize(mean=[0.4914, 0.4822, 0.4465], std=[0.2023, 0.1994, 0.2010])\n",
    "])\n",
    "\n",
    "class ModernAlexNet(nn.Module):\n",
    "    def __init__(self, num_classes=10, dropout_rate=0.5):\n",
    "        super(ModernAlexNet, self).__init__()\n",
    "        \n",
    "        # 特征提取器\n",
    "        self.features = nn.Sequential(\n",
    "            # Conv1\n",
    "            nn.Conv2d(3, 96, kernel_size=11, stride=4, padding=2),\n",
    "            nn.BatchNorm2d(96),\n",
    "            nn.ReLU(inplace=True),\n",
    "            nn.MaxPool2d(kernel_size=3, stride=2),\n",
    "            nn.Dropout2d(0.2),\n",
    "            \n",
    "            # Conv2\n",
    "            nn.Conv2d(96, 256, kernel_size=5, padding=2),\n",
    "            nn.BatchNorm2d(256),\n",
    "            nn.ReLU(inplace=True),\n",
    "            nn.MaxPool2d(kernel_size=3, stride=2),\n",
    "            nn.Dropout2d(0.2),\n",
    "            \n",
    "            # Conv3\n",
    "            nn.Conv2d(256, 384, kernel_size=3, padding=1),\n",
    "            nn.BatchNorm2d(384),\n",
    "            nn.ReLU(inplace=True),\n",
    "            nn.Dropout2d(0.2),\n",
    "            \n",
    "            # Conv4\n",
    "            nn.Conv2d(384, 384, kernel_size=3, padding=1),\n",
    "            nn.BatchNorm2d(384),\n",
    "            nn.ReLU(inplace=True),\n",
    "            nn.Dropout2d(0.2),\n",
    "            \n",
    "            # Conv5\n",
    "            nn.Conv2d(384, 256, kernel_size=3, padding=1),\n",
    "            nn.BatchNorm2d(256),\n",
    "            nn.ReLU(inplace=True),\n",
    "            nn.MaxPool2d(kernel_size=3, stride=2),\n",
    "            nn.Dropout2d(0.2)\n",
    "        )\n",
    "        \n",
    "        # 计算卷积层输出大小\n",
    "        self.avgpool = nn.AdaptiveAvgPool2d((6, 6))\n",
    "        \n",
    "        # 分类器\n",
    "        self.classifier = nn.Sequential(\n",
    "            nn.Dropout(dropout_rate),\n",
    "            nn.Linear(256 * 6 * 6, 4096),\n",
    "            nn.ReLU(inplace=True),\n",
    "            nn.BatchNorm1d(4096),\n",
    "            nn.Dropout(dropout_rate),\n",
    "            nn.Linear(4096, 1024),\n",
    "            nn.ReLU(inplace=True),\n",
    "            nn.BatchNorm1d(1024),\n",
    "            nn.Linear(1024, num_classes)\n",
    "        )\n",
    "        \n",
    "        self._initialize_weights()\n",
    "    \n",
    "    def _initialize_weights(self):\n",
    "        for m in self.modules():\n",
    "            if isinstance(m, nn.Conv2d):\n",
    "                nn.init.kaiming_normal_(m.weight, mode='fan_out', nonlinearity='relu')\n",
    "                if m.bias is not None:\n",
    "                    nn.init.constant_(m.bias, 0)\n",
    "            elif isinstance(m, (nn.BatchNorm2d, nn.BatchNorm1d)):\n",
    "                nn.init.constant_(m.weight, 1)\n",
    "                nn.init.constant_(m.bias, 0)\n",
    "            elif isinstance(m, nn.Linear):\n",
    "                nn.init.normal_(m.weight, 0, 0.01)\n",
    "                nn.init.constant_(m.bias, 0)\n",
    "\n",
    "    def forward(self, x):\n",
    "        x = self.features(x)\n",
    "        x = self.avgpool(x)\n",
    "        x = torch.flatten(x, 1)\n",
    "        x = self.classifier(x)\n",
    "        return x\n",
    "\n",
    "def train_epoch(model, train_loader, criterion, optimizer, device, scheduler=None):\n",
    "    model.train()\n",
    "    running_loss = 0.0\n",
    "    correct = 0\n",
    "    total = 0\n",
    "    \n",
    "    pbar = tqdm(train_loader, desc='Training')\n",
    "    for inputs, labels in pbar:\n",
    "        inputs, labels = inputs.to(device), labels.to(device)\n",
    "        \n",
    "        # 前向传播\n",
    "        outputs = model(inputs)\n",
    "        loss = criterion(outputs, labels)\n",
    "        \n",
    "        # 反向传播和优化\n",
    "        optimizer.zero_grad()\n",
    "        loss.backward()\n",
    "        torch.nn.utils.clip_grad_norm_(model.parameters(), max_norm=1.0)\n",
    "        optimizer.step()\n",
    "        \n",
    "        if scheduler is not None:\n",
    "            scheduler.step()\n",
    "        \n",
    "        # 统计\n",
    "        running_loss += loss.item()\n",
    "        _, predicted = outputs.max(1)\n",
    "        total += labels.size(0)\n",
    "        correct += predicted.eq(labels).sum().item()\n",
    "        \n",
    "        # 更新进度条\n",
    "        pbar.set_postfix({\n",
    "            'loss': f'{loss.item():.4f}',\n",
    "            'acc': f'{100.*correct/total:.2f}%'\n",
    "        })\n",
    "    \n",
    "    return running_loss / len(train_loader), 100. * correct / total\n",
    "\n",
    "def evaluate(model, test_loader, criterion, device):\n",
    "    model.eval()\n",
    "    running_loss = 0.0\n",
    "    correct = 0\n",
    "    total = 0\n",
    "    \n",
    "    with torch.no_grad():\n",
    "        for inputs, labels in test_loader:\n",
    "            inputs, labels = inputs.to(device), labels.to(device)\n",
    "            outputs = model(inputs)\n",
    "            loss = criterion(outputs, labels)\n",
    "            \n",
    "            running_loss += loss.item()\n",
    "            _, predicted = outputs.max(1)\n",
    "            total += labels.size(0)\n",
    "            correct += predicted.eq(labels).sum().item()\n",
    "    \n",
    "    return running_loss / len(test_loader), 100. * correct / total\n",
    "\n",
    "def main():\n",
    "    # 设置随机种子\n",
    "    set_seed(42)\n",
    "    \n",
    "    # 加载数据集\n",
    "    train_dataset = datasets.CIFAR10(\n",
    "        root='./data', train=True, transform=transform_train, download=True)\n",
    "    test_dataset = datasets.CIFAR10(\n",
    "        root='./data', train=False, transform=transform_test, download=True)\n",
    "    \n",
    "    train_loader = DataLoader(\n",
    "        train_dataset, batch_size=64, shuffle=True,\n",
    "        num_workers=2, pin_memory=True)\n",
    "    test_loader = DataLoader(\n",
    "        test_dataset, batch_size=128, shuffle=False,\n",
    "        num_workers=2, pin_memory=True)\n",
    "    \n",
    "    # 初始化模型和训练组件\n",
    "    model = ModernAlexNet(num_classes=10).to(device)\n",
    "    criterion = nn.CrossEntropyLoss()\n",
    "    optimizer = optim.AdamW(model.parameters(), lr=0.001, weight_decay=0.01)\n",
    "    \n",
    "    # 学习率调度\n",
    "    scheduler = optim.lr_scheduler.OneCycleLR(\n",
    "        optimizer,\n",
    "        max_lr=0.001,\n",
    "        epochs=30,\n",
    "        steps_per_epoch=len(train_loader),\n",
    "        pct_start=0.1\n",
    "    )\n",
    "    \n",
    "    # 训练循环\n",
    "    best_acc = 0\n",
    "    epochs = 30\n",
    "    \n",
    "    for epoch in range(epochs):\n",
    "        print(f\"\\nEpoch {epoch+1}/{epochs}\")\n",
    "        start_time = time.time()\n",
    "        \n",
    "        # 训练\n",
    "        train_loss, train_acc = train_epoch(\n",
    "            model, train_loader, criterion, optimizer, device, scheduler)\n",
    "        \n",
    "        # 评估\n",
    "        test_loss, test_acc = evaluate(model, test_loader, criterion, device)\n",
    "        \n",
    "        # 保存最佳模型\n",
    "        if test_acc > best_acc:\n",
    "            best_acc = test_acc\n",
    "            torch.save({\n",
    "                'epoch': epoch,\n",
    "                'model_state_dict': model.state_dict(),\n",
    "                'optimizer_state_dict': optimizer.state_dict(),\n",
    "                'best_acc': best_acc,\n",
    "            }, 'best_alexnet_cifar10.pth')\n",
    "        \n",
    "        # 打印训练信息\n",
    "        epoch_time = time.time() - start_time\n",
    "        print(f\"Train Loss: {train_loss:.4f}, Train Acc: {train_acc:.2f}%\")\n",
    "        print(f\"Test Loss: {test_loss:.4f}, Test Acc: {test_acc:.2f}%\")\n",
    "        print(f\"Time: {epoch_time:.2f}s\")\n",
    "        print(\"-\" * 60)\n",
    "    \n",
    "    print(f\"Best Test Accuracy: {best_acc:.2f}%\")\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ae0ffccf",
   "metadata": {
    "papermill": {
     "duration": 3.283715,
     "end_time": "2024-12-13T20:18:09.012122",
     "exception": false,
     "start_time": "2024-12-13T20:18:05.728407",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "0e4c353d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-13T20:18:15.611095Z",
     "iopub.status.busy": "2024-12-13T20:18:15.610187Z",
     "iopub.status.idle": "2024-12-13T23:00:41.035757Z",
     "shell.execute_reply": "2024-12-13T23:00:41.034663Z"
    },
    "papermill": {
     "duration": 9748.64118,
     "end_time": "2024-12-13T23:00:41.037663",
     "exception": false,
     "start_time": "2024-12-13T20:18:12.396483",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Using device: cuda\n",
      "Files already downloaded and verified\n",
      "Files already downloaded and verified\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=ResNet50_Weights.IMAGENET1K_V1`. You can also use `weights=ResNet50_Weights.DEFAULT` to get the most up-to-date weights.\n",
      "  warnings.warn(msg)\n",
      "Downloading: \"https://download.pytorch.org/models/resnet50-0676ba61.pth\" to /root/.cache/torch/hub/checkpoints/resnet50-0676ba61.pth\n",
      "100%|██████████| 97.8M/97.8M [00:00<00:00, 179MB/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/30\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 782/782 [04:37<00:00,  2.82it/s, loss=0.8799, acc=70.94%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.8913, Train Acc: 70.94%\n",
      "Test Loss: 0.7026, Test Acc: 75.88%\n",
      "Epoch 2/30\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 782/782 [04:30<00:00,  2.89it/s, loss=0.4403, acc=76.04%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.6945, Train Acc: 76.04%\n",
      "Test Loss: 0.6531, Test Acc: 77.25%\n",
      "Epoch 3/30\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 782/782 [04:29<00:00,  2.90it/s, loss=0.6010, acc=76.86%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.6701, Train Acc: 76.86%\n",
      "Test Loss: 0.6895, Test Acc: 76.23%\n",
      "Epoch 4/30\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 782/782 [04:29<00:00,  2.91it/s, loss=0.7496, acc=77.46%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.6474, Train Acc: 77.46%\n",
      "Test Loss: 0.5959, Test Acc: 79.31%\n",
      "Epoch 5/30\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 782/782 [04:29<00:00,  2.90it/s, loss=0.3768, acc=78.39%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.6303, Train Acc: 78.39%\n",
      "Test Loss: 0.6712, Test Acc: 76.39%\n",
      "Epoch 6/30\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 782/782 [04:29<00:00,  2.90it/s, loss=0.4954, acc=78.62%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.6237, Train Acc: 78.62%\n",
      "Test Loss: 0.6004, Test Acc: 79.11%\n",
      "Epoch 7/30\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 782/782 [04:30<00:00,  2.89it/s, loss=1.2169, acc=78.65%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.6155, Train Acc: 78.65%\n",
      "Test Loss: 0.5957, Test Acc: 79.49%\n",
      "Epoch 8/30\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 782/782 [04:34<00:00,  2.85it/s, loss=0.3846, acc=78.92%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.6133, Train Acc: 78.92%\n",
      "Test Loss: 0.6548, Test Acc: 77.59%\n",
      "Epoch 9/30\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 782/782 [04:36<00:00,  2.83it/s, loss=1.1036, acc=79.34%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.6008, Train Acc: 79.34%\n",
      "Test Loss: 0.5906, Test Acc: 79.48%\n",
      "Epoch 10/30\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 782/782 [04:36<00:00,  2.83it/s, loss=0.7555, acc=79.41%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.5962, Train Acc: 79.41%\n",
      "Test Loss: 0.5896, Test Acc: 79.38%\n",
      "Epoch 11/30\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 782/782 [04:36<00:00,  2.82it/s, loss=0.7146, acc=79.96%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.5843, Train Acc: 79.96%\n",
      "Test Loss: 0.5897, Test Acc: 79.51%\n",
      "Epoch 12/30\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 782/782 [04:36<00:00,  2.83it/s, loss=0.2937, acc=79.94%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.5809, Train Acc: 79.94%\n",
      "Test Loss: 0.5582, Test Acc: 80.66%\n",
      "Epoch 13/30\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 782/782 [04:37<00:00,  2.82it/s, loss=0.5629, acc=80.33%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.5761, Train Acc: 80.33%\n",
      "Test Loss: 0.5852, Test Acc: 79.46%\n",
      "Epoch 14/30\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 782/782 [04:37<00:00,  2.81it/s, loss=0.3959, acc=80.14%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.5742, Train Acc: 80.14%\n",
      "Test Loss: 0.5714, Test Acc: 79.97%\n",
      "Epoch 15/30\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 782/782 [04:37<00:00,  2.82it/s, loss=0.4911, acc=80.33%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.5715, Train Acc: 80.33%\n",
      "Test Loss: 0.5760, Test Acc: 80.22%\n",
      "Epoch 16/30\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 782/782 [04:37<00:00,  2.82it/s, loss=0.3962, acc=80.37%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.5689, Train Acc: 80.37%\n",
      "Test Loss: 0.5700, Test Acc: 80.35%\n",
      "Epoch 17/30\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 782/782 [04:35<00:00,  2.84it/s, loss=0.6726, acc=80.65%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.5645, Train Acc: 80.65%\n",
      "Test Loss: 0.5473, Test Acc: 80.92%\n",
      "Epoch 18/30\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 782/782 [04:35<00:00,  2.84it/s, loss=0.8292, acc=80.65%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.5621, Train Acc: 80.65%\n",
      "Test Loss: 0.5789, Test Acc: 80.24%\n",
      "Epoch 19/30\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 782/782 [04:36<00:00,  2.82it/s, loss=0.1951, acc=80.99%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.5550, Train Acc: 80.99%\n",
      "Test Loss: 0.5691, Test Acc: 80.40%\n",
      "Epoch 20/30\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 782/782 [04:35<00:00,  2.84it/s, loss=1.1810, acc=80.76%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.5574, Train Acc: 80.76%\n",
      "Test Loss: 0.5499, Test Acc: 81.11%\n",
      "Epoch 21/30\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 782/782 [04:34<00:00,  2.84it/s, loss=0.6091, acc=81.10%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.5482, Train Acc: 81.10%\n",
      "Test Loss: 0.5395, Test Acc: 81.32%\n",
      "Epoch 22/30\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 782/782 [04:35<00:00,  2.84it/s, loss=0.8617, acc=81.32%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.5420, Train Acc: 81.32%\n",
      "Test Loss: 0.5626, Test Acc: 80.39%\n",
      "Epoch 23/30\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 782/782 [04:35<00:00,  2.84it/s, loss=0.5601, acc=81.23%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.5450, Train Acc: 81.23%\n",
      "Test Loss: 0.5424, Test Acc: 81.08%\n",
      "Epoch 24/30\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 782/782 [04:35<00:00,  2.84it/s, loss=0.5113, acc=81.26%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.5407, Train Acc: 81.26%\n",
      "Test Loss: 0.5517, Test Acc: 81.11%\n",
      "Epoch 25/30\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 782/782 [04:35<00:00,  2.84it/s, loss=0.9318, acc=81.44%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.5381, Train Acc: 81.44%\n",
      "Test Loss: 0.5418, Test Acc: 81.36%\n",
      "Epoch 26/30\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 782/782 [04:35<00:00,  2.83it/s, loss=0.3615, acc=81.46%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.5375, Train Acc: 81.46%\n",
      "Test Loss: 0.5250, Test Acc: 82.06%\n",
      "Epoch 27/30\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 782/782 [04:34<00:00,  2.85it/s, loss=0.6042, acc=81.25%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.5370, Train Acc: 81.25%\n",
      "Test Loss: 0.5057, Test Acc: 82.26%\n",
      "Epoch 28/30\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 782/782 [04:36<00:00,  2.83it/s, loss=0.7416, acc=81.37%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.5401, Train Acc: 81.37%\n",
      "Test Loss: 0.5425, Test Acc: 81.40%\n",
      "Epoch 29/30\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 782/782 [04:35<00:00,  2.84it/s, loss=0.7423, acc=81.63%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.5336, Train Acc: 81.63%\n",
      "Test Loss: 0.5687, Test Acc: 80.94%\n",
      "Epoch 30/30\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 782/782 [04:35<00:00,  2.84it/s, loss=0.8613, acc=81.50%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.5336, Train Acc: 81.50%\n",
      "Test Loss: 0.5209, Test Acc: 81.65%\n",
      "Best Test Accuracy: 0.82%\n"
     ]
    }
   ],
   "source": [
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.optim as optim\n",
    "from torch.utils.data import DataLoader\n",
    "from torchvision import datasets, transforms, models\n",
    "import time\n",
    "from tqdm import tqdm\n",
    "\n",
    "# 设置设备\n",
    "device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "print(f\"Using device: {device}\")\n",
    "\n",
    "# 数据预处理和增强\n",
    "transform_train = transforms.Compose([\n",
    "    transforms.Resize(256),\n",
    "    transforms.RandomCrop(227),\n",
    "    transforms.RandomHorizontalFlip(),\n",
    "    transforms.ToTensor(),\n",
    "    transforms.Normalize(mean=[0.4914, 0.4822, 0.4465], std=[0.2023, 0.1994, 0.2010])\n",
    "])\n",
    "\n",
    "transform_test = transforms.Compose([\n",
    "    transforms.Resize(256),\n",
    "    transforms.CenterCrop(227),\n",
    "    transforms.ToTensor(),\n",
    "    transforms.Normalize(mean=[0.4914, 0.4822, 0.4465], std=[0.2023, 0.1994, 0.2010])\n",
    "])\n",
    "\n",
    "# 加载数据集\n",
    "train_dataset = datasets.CIFAR10(root='./data', train=True, transform=transform_train, download=True)\n",
    "test_dataset = datasets.CIFAR10(root='./data', train=False, transform=transform_test, download=True)\n",
    "\n",
    "train_loader = DataLoader(train_dataset, batch_size=64, shuffle=True)\n",
    "test_loader = DataLoader(test_dataset, batch_size=128, shuffle=False)\n",
    "\n",
    "# 加载预训练的 ResNet50\n",
    "model = models.resnet50(pretrained=True)\n",
    "\n",
    "# 修改最后一层以适应 CIFAR-10（10 类）\n",
    "model.fc = nn.Linear(model.fc.in_features, 10)\n",
    "\n",
    "# 冻结所有层，除了最后一层\n",
    "for param in model.parameters():\n",
    "    param.requires_grad = False\n",
    "\n",
    "for param in model.fc.parameters():\n",
    "    param.requires_grad = True\n",
    "\n",
    "model.to(device)\n",
    "\n",
    "# 设置优化器和损失函数\n",
    "criterion = nn.CrossEntropyLoss()\n",
    "optimizer = optim.Adam(model.fc.parameters(), lr=0.001)\n",
    "\n",
    "# 训练过程\n",
    "epochs = 30\n",
    "best_acc = 0\n",
    "\n",
    "for epoch in range(epochs):\n",
    "    print(f\"Epoch {epoch+1}/{epochs}\")\n",
    "    model.train()\n",
    "    running_loss = 0.0\n",
    "    correct = 0\n",
    "    total = 0\n",
    "\n",
    "    pbar = tqdm(train_loader, desc=\"Training\")\n",
    "    for inputs, labels in pbar:\n",
    "        inputs, labels = inputs.to(device), labels.to(device)\n",
    "\n",
    "        # 前向传播\n",
    "        outputs = model(inputs)\n",
    "        loss = criterion(outputs, labels)\n",
    "\n",
    "        # 反向传播\n",
    "        optimizer.zero_grad()\n",
    "        loss.backward()\n",
    "        optimizer.step()\n",
    "\n",
    "        # 统计\n",
    "        running_loss += loss.item()\n",
    "        _, predicted = outputs.max(1)\n",
    "        total += labels.size(0)\n",
    "        correct += predicted.eq(labels).sum().item()\n",
    "\n",
    "        pbar.set_postfix({'loss': f'{loss.item():.4f}', 'acc': f'{100.*correct/total:.2f}%'})\n",
    "\n",
    "    print(f\"Train Loss: {running_loss/len(train_loader):.4f}, Train Acc: {100.*correct/total:.2f}%\")\n",
    "\n",
    "    # 评估\n",
    "    model.eval()\n",
    "    test_loss = 0.0\n",
    "    correct = 0\n",
    "    total = 0\n",
    "\n",
    "    with torch.no_grad():\n",
    "        for inputs, labels in test_loader:\n",
    "            inputs, labels = inputs.to(device), labels.to(device)\n",
    "            outputs = model(inputs)\n",
    "            loss = criterion(outputs, labels)\n",
    "            test_loss += loss.item()\n",
    "            _, predicted = outputs.max(1)\n",
    "            total += labels.size(0)\n",
    "            correct += predicted.eq(labels).sum().item()\n",
    "\n",
    "    print(f\"Test Loss: {test_loss/len(test_loader):.4f}, Test Acc: {100.*correct/total:.2f}%\")\n",
    "\n",
    "    # 保存最佳模型\n",
    "    if correct / total > best_acc:\n",
    "        best_acc = correct / total\n",
    "        torch.save(model.state_dict(), 'best_model.pth')\n",
    "\n",
    "print(f\"Best Test Accuracy: {best_acc:.2f}%\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "303afdd7",
   "metadata": {
    "papermill": {
     "duration": 6.038483,
     "end_time": "2024-12-13T23:00:53.278629",
     "exception": false,
     "start_time": "2024-12-13T23:00:47.240146",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "9bfdf8f5",
   "metadata": {
    "papermill": {
     "duration": 5.964377,
     "end_time": "2024-12-13T23:01:05.348374",
     "exception": false,
     "start_time": "2024-12-13T23:00:59.383997",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# vit_base_patch16_224',"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "a8edd21e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-13T23:01:17.610864Z",
     "iopub.status.busy": "2024-12-13T23:01:17.610531Z",
     "iopub.status.idle": "2024-12-13T23:01:30.595670Z",
     "shell.execute_reply": "2024-12-13T23:01:30.594521Z"
    },
    "papermill": {
     "duration": 19.046921,
     "end_time": "2024-12-13T23:01:30.597649",
     "exception": false,
     "start_time": "2024-12-13T23:01:11.550728",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: timm in /opt/conda/lib/python3.10/site-packages (1.0.9)\r\n",
      "Requirement already satisfied: torch in /opt/conda/lib/python3.10/site-packages (2.4.0)\r\n",
      "Requirement already satisfied: torchvision in /opt/conda/lib/python3.10/site-packages (0.19.0)\r\n",
      "Requirement already satisfied: pyyaml in /opt/conda/lib/python3.10/site-packages (from timm) (6.0.2)\r\n",
      "Requirement already satisfied: huggingface_hub in /opt/conda/lib/python3.10/site-packages (from timm) (0.25.1)\r\n",
      "Requirement already satisfied: safetensors in /opt/conda/lib/python3.10/site-packages (from timm) (0.4.5)\r\n",
      "Requirement already satisfied: filelock in /opt/conda/lib/python3.10/site-packages (from torch) (3.15.1)\r\n",
      "Requirement already satisfied: typing-extensions>=4.8.0 in /opt/conda/lib/python3.10/site-packages (from torch) (4.12.2)\r\n",
      "Requirement already satisfied: sympy in /opt/conda/lib/python3.10/site-packages (from torch) (1.13.3)\r\n",
      "Requirement already satisfied: networkx in /opt/conda/lib/python3.10/site-packages (from torch) (3.3)\r\n",
      "Requirement already satisfied: jinja2 in /opt/conda/lib/python3.10/site-packages (from torch) (3.1.4)\r\n",
      "Requirement already satisfied: fsspec in /opt/conda/lib/python3.10/site-packages (from torch) (2024.6.1)\r\n",
      "Requirement already satisfied: numpy in /opt/conda/lib/python3.10/site-packages (from torchvision) (1.26.4)\r\n",
      "Requirement already satisfied: pillow!=8.3.*,>=5.3.0 in /opt/conda/lib/python3.10/site-packages (from torchvision) (10.3.0)\r\n",
      "Requirement already satisfied: packaging>=20.9 in /opt/conda/lib/python3.10/site-packages (from huggingface_hub->timm) (21.3)\r\n",
      "Requirement already satisfied: requests in /opt/conda/lib/python3.10/site-packages (from huggingface_hub->timm) (2.32.3)\r\n",
      "Requirement already satisfied: tqdm>=4.42.1 in /opt/conda/lib/python3.10/site-packages (from huggingface_hub->timm) (4.66.4)\r\n",
      "Requirement already satisfied: MarkupSafe>=2.0 in /opt/conda/lib/python3.10/site-packages (from jinja2->torch) (2.1.5)\r\n",
      "Requirement already satisfied: mpmath<1.4,>=1.1.0 in /opt/conda/lib/python3.10/site-packages (from sympy->torch) (1.3.0)\r\n",
      "Requirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /opt/conda/lib/python3.10/site-packages (from packaging>=20.9->huggingface_hub->timm) (3.1.2)\r\n",
      "Requirement already satisfied: charset-normalizer<4,>=2 in /opt/conda/lib/python3.10/site-packages (from requests->huggingface_hub->timm) (3.3.2)\r\n",
      "Requirement already satisfied: idna<4,>=2.5 in /opt/conda/lib/python3.10/site-packages (from requests->huggingface_hub->timm) (3.7)\r\n",
      "Requirement already satisfied: urllib3<3,>=1.21.1 in /opt/conda/lib/python3.10/site-packages (from requests->huggingface_hub->timm) (1.26.18)\r\n",
      "Requirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.10/site-packages (from requests->huggingface_hub->timm) (2024.8.30)\r\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install timm torch torchvision\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "8c1f126e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-13T23:01:42.736818Z",
     "iopub.status.busy": "2024-12-13T23:01:42.736418Z",
     "iopub.status.idle": "2024-12-14T00:31:44.825500Z",
     "shell.execute_reply": "2024-12-14T00:31:44.824282Z"
    },
    "papermill": {
     "duration": 5414.111368,
     "end_time": "2024-12-14T00:31:50.822407",
     "exception": false,
     "start_time": "2024-12-13T23:01:36.711039",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Using device: cuda\n",
      "Files already downloaded and verified\n",
      "Files already downloaded and verified\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "6e537608490d485e8646cd16876f0693",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "model.safetensors:   0%|          | 0.00/346M [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 1/3\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 782/782 [28:10<00:00,  2.16s/it, loss=0.2711, acc=89.91%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.3131, Train Acc: 89.91%\n",
      "Test Loss: 0.4209, Test Acc: 85.81%\n",
      "Time: 1800.78s\n",
      "------------------------------------------------------------\n",
      "\n",
      "Epoch 2/3\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 782/782 [28:10<00:00,  2.16s/it, loss=1.9200, acc=70.94%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.8530, Train Acc: 70.94%\n",
      "Test Loss: 1.5533, Test Acc: 45.63%\n",
      "Time: 1798.61s\n",
      "------------------------------------------------------------\n",
      "\n",
      "Epoch 3/3\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 782/782 [28:06<00:00,  2.16s/it, loss=1.6653, acc=43.43%]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 1.5640, Train Acc: 43.43%\n",
      "Test Loss: 1.6118, Test Acc: 39.96%\n",
      "Time: 1794.38s\n",
      "------------------------------------------------------------\n",
      "Best Test Accuracy: 85.81%\n"
     ]
    }
   ],
   "source": [
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.optim as optim\n",
    "from torch.utils.data import DataLoader\n",
    "from torchvision import datasets, transforms\n",
    "import time\n",
    "from tqdm import tqdm\n",
    "import timm\n",
    "import numpy as np\n",
    "\n",
    "# 设置随机种子\n",
    "def set_seed(seed=42):\n",
    "    torch.manual_seed(seed)\n",
    "    if torch.cuda.is_available():\n",
    "        torch.cuda.manual_seed_all(seed)\n",
    "    np.random.seed(seed)\n",
    "    torch.backends.cudnn.deterministic = True\n",
    "\n",
    "# 配置设备\n",
    "device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "print(f\"Using device: {device}\")\n",
    "\n",
    "# 数据预处理和数据增强\n",
    "transform_train = transforms.Compose([\n",
    "    transforms.Resize(256),  # 先调整为较大尺寸\n",
    "    transforms.RandomCrop(224),  # 随机裁剪到目标尺寸\n",
    "    transforms.RandomHorizontalFlip(),\n",
    "    transforms.RandomRotation(15),\n",
    "    transforms.ColorJitter(brightness=0.2, contrast=0.2, saturation=0.2),\n",
    "    transforms.ToTensor(),\n",
    "    transforms.Normalize(mean=[0.4914, 0.4822, 0.4465], std=[0.2023, 0.1994, 0.2010])\n",
    "])\n",
    "\n",
    "transform_test = transforms.Compose([\n",
    "    transforms.Resize(256),\n",
    "    transforms.CenterCrop(224),\n",
    "    transforms.ToTensor(),\n",
    "    transforms.Normalize(mean=[0.4914, 0.4822, 0.4465], std=[0.2023, 0.1994, 0.2010])\n",
    "])\n",
    "\n",
    "# 加载 CIFAR-10 数据集\n",
    "train_dataset = datasets.CIFAR10(\n",
    "    root='./data', train=True, transform=transform_train, download=True)\n",
    "test_dataset = datasets.CIFAR10(\n",
    "    root='./data', train=False, transform=transform_test, download=True)\n",
    "\n",
    "train_loader = DataLoader(\n",
    "    train_dataset, batch_size=64, shuffle=True,\n",
    "    num_workers=2, pin_memory=True)\n",
    "test_loader = DataLoader(\n",
    "    test_dataset, batch_size=128, shuffle=False,\n",
    "    num_workers=2, pin_memory=True)\n",
    "\n",
    "# 使用 ViT 模型（如果 CaiT 模型不可用）\n",
    "model = timm.create_model('vit_base_patch16_224', pretrained=True)\n",
    "model.head = nn.Linear(model.head.in_features, 10)  # 修改输出层，适应 CIFAR-10 数据集（10 类）\n",
    "\n",
    "model.to(device)\n",
    "\n",
    "# 损失函数和优化器\n",
    "criterion = nn.CrossEntropyLoss()\n",
    "optimizer = optim.AdamW(model.parameters(), lr=0.001, weight_decay=0.01)\n",
    "\n",
    "# 学习率调度器\n",
    "scheduler = optim.lr_scheduler.OneCycleLR(\n",
    "    optimizer,\n",
    "    max_lr=0.001,\n",
    "    epochs=30,\n",
    "    steps_per_epoch=len(train_loader),\n",
    "    pct_start=0.1\n",
    ")\n",
    "\n",
    "# 设置随机种子\n",
    "set_seed(42)\n",
    "\n",
    "# 训练和评估函数\n",
    "def train_epoch(model, train_loader, criterion, optimizer, device, scheduler=None):\n",
    "    model.train()\n",
    "    running_loss = 0.0\n",
    "    correct = 0\n",
    "    total = 0\n",
    "    \n",
    "    pbar = tqdm(train_loader, desc='Training')\n",
    "    for inputs, labels in pbar:\n",
    "        inputs, labels = inputs.to(device), labels.to(device)\n",
    "        \n",
    "        # 前向传播\n",
    "        outputs = model(inputs)\n",
    "        loss = criterion(outputs, labels)\n",
    "        \n",
    "        # 反向传播和优化\n",
    "        optimizer.zero_grad()\n",
    "        loss.backward()\n",
    "        torch.nn.utils.clip_grad_norm_(model.parameters(), max_norm=1.0)\n",
    "        optimizer.step()\n",
    "        \n",
    "        if scheduler is not None:\n",
    "            scheduler.step()\n",
    "        \n",
    "        # 统计\n",
    "        running_loss += loss.item()\n",
    "        _, predicted = outputs.max(1)\n",
    "        total += labels.size(0)\n",
    "        correct += predicted.eq(labels).sum().item()\n",
    "        \n",
    "        # 更新进度条\n",
    "        pbar.set_postfix({\n",
    "            'loss': f'{loss.item():.4f}',\n",
    "            'acc': f'{100.*correct/total:.2f}%'\n",
    "        })\n",
    "    \n",
    "    return running_loss / len(train_loader), 100. * correct / total\n",
    "\n",
    "def evaluate(model, test_loader, criterion, device):\n",
    "    model.eval()\n",
    "    running_loss = 0.0\n",
    "    correct = 0\n",
    "    total = 0\n",
    "    \n",
    "    with torch.no_grad():\n",
    "        for inputs, labels in test_loader:\n",
    "            inputs, labels = inputs.to(device), labels.to(device)\n",
    "            outputs = model(inputs)\n",
    "            loss = criterion(outputs, labels)\n",
    "            \n",
    "            running_loss += loss.item()\n",
    "            _, predicted = outputs.max(1)\n",
    "            total += labels.size(0)\n",
    "            correct += predicted.eq(labels).sum().item()\n",
    "    \n",
    "    return running_loss / len(test_loader), 100. * correct / total\n",
    "\n",
    "# 训练过程\n",
    "def main():\n",
    "    best_acc = 0\n",
    "    epochs = 3\n",
    "    \n",
    "    for epoch in range(epochs):\n",
    "        print(f\"\\nEpoch {epoch+1}/{epochs}\")\n",
    "        start_time = time.time()\n",
    "        \n",
    "        # 训练\n",
    "        train_loss, train_acc = train_epoch(\n",
    "            model, train_loader, criterion, optimizer, device, scheduler)\n",
    "        \n",
    "        # 评估\n",
    "        test_loss, test_acc = evaluate(model, test_loader, criterion, device)\n",
    "        \n",
    "        # 保存最佳模型\n",
    "        if test_acc > best_acc:\n",
    "            best_acc = test_acc\n",
    "            torch.save({\n",
    "                'epoch': epoch,\n",
    "                'model_state_dict': model.state_dict(),\n",
    "                'optimizer_state_dict': optimizer.state_dict(),\n",
    "                'best_acc': best_acc,\n",
    "            }, 'best_cait_model.pth')\n",
    "        \n",
    "        # 打印训练信息\n",
    "        epoch_time = time.time() - start_time\n",
    "        print(f\"Train Loss: {train_loss:.4f}, Train Acc: {train_acc:.2f}%\")\n",
    "        print(f\"Test Loss: {test_loss:.4f}, Test Acc: {test_acc:.2f}%\")\n",
    "        print(f\"Time: {epoch_time:.2f}s\")\n",
    "        print(\"-\" * 60)\n",
    "    \n",
    "    print(f\"Best Test Accuracy: {best_acc:.2f}%\")\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1abf5d17",
   "metadata": {
    "papermill": {
     "duration": 6.134322,
     "end_time": "2024-12-14T00:32:03.110688",
     "exception": false,
     "start_time": "2024-12-14T00:31:56.976366",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# The end"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "nvidiaTeslaT4",
   "dataSources": [],
   "dockerImageVersionId": 30787,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 26143.916461,
   "end_time": "2024-12-14T00:32:13.494832",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-12-13T17:16:29.578371",
   "version": "2.6.0"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {
     "3ca9077fe9f14987941b0e9b8f2f6d39": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_e76f24f64b2a4a27ad7ea4da294bc885",
       "placeholder": "​",
       "style": "IPY_MODEL_d0e774768222444f933007f3ba210709",
       "value": " 346M/346M [00:01&lt;00:00, 226MB/s]"
      }
     },
     "626f9f81e9224a449023ec64e86140f5": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "6e537608490d485e8646cd16876f0693": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_e3042f4ac5df46e1a2b078ae3db81b18",
        "IPY_MODEL_974c41cd189244cfbafa29041aaedafc",
        "IPY_MODEL_3ca9077fe9f14987941b0e9b8f2f6d39"
       ],
       "layout": "IPY_MODEL_a8f5a2a1385b4e7daf6ec427f03e2e98"
      }
     },
     "8bc22eacbcc14d6f8ec2fc2e344228af": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "974c41cd189244cfbafa29041aaedafc": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_8bc22eacbcc14d6f8ec2fc2e344228af",
       "max": 346284714.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_b10bc5ead5da47e8a23aa6399227e85f",
       "value": 346284714.0
      }
     },
     "a8f5a2a1385b4e7daf6ec427f03e2e98": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "b10bc5ead5da47e8a23aa6399227e85f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "b75da731f25e43328e08f212d4b3bc43": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "d0e774768222444f933007f3ba210709": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "e3042f4ac5df46e1a2b078ae3db81b18": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_b75da731f25e43328e08f212d4b3bc43",
       "placeholder": "​",
       "style": "IPY_MODEL_626f9f81e9224a449023ec64e86140f5",
       "value": "model.safetensors: 100%"
      }
     },
     "e76f24f64b2a4a27ad7ea4da294bc885": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     }
    },
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
